#[
    * ============================================== *
    * Easy Hot Keys. Version: 1.1. Author: 0x00000ED *
    * ============================================== *
    
    KeyMap:
    
        0
        1
        2
        3
        4
        5
        6
        7
        8
        9
        a
        b
        c
        d
        e
        f
        g
        h
        i
        j
        k
        l
        m
        n
        o
        p
        q
        r
        s
        t
        u
        v
        w
        x
        y
        z
        pad_0
        pad_1
        pad_2
        pad_3
        pad_4
        pad_5
        pad_6
        pad_7
        pad_8
        pad_9
        pad_divide
        pad_multiply
        pad_minus
        pad_plus
        pad_enter
        pad_decimal
        lbracket
        rbracket
        semicolon
        apostrophe
        backquote
        comma
        period
        slash
        backslash
        minus
        equal
        enter
        space
        backspace
        tab
        capslock
        numlock
        escape
        scrolllock
        insert
        delete
        home
        end
        pageup
        pagedown
        break
        lshift
        rshift
        lalt
        ralt
        lcontrol
        rcontrol
        app
        up
        left
        down
        right
        f1
        f2
        f3
        f4
        f5
        f6
        f7
        f8
        f9
        f10
        f11
        f12
        capslock
        numlock
        mouse_left
        mouse_right
        mouse_middle
        mouse_4
        mouse_5
        
    Wheel:
    
        mouse_wheel_up
        mouse_wheel_down
    
    Methods:
        
        /*
        * Register Hot Key Callback.
        * @param Hotkey     string.
        * @param Callback   string.
        * @noreturn
        **/
        void regHotKey([Hotkey Callback]:string)
        functag void hotKeyCallback()
        
        /*
        * Register Key Callback.
        * @param Callback   string.
        * @noreturn
        **/
        void regKeyClk(Callback:string)
        functag void onKey(Key:string, State:number)
        
        /*
        * Set key hook to selected player.
        * @param Player     entity.
        * @noreturn
        **/
        void hookPlayerKeys(Player:entity)
        
        /*
        * Register Wheel Callback.
        * @param Callback   string.
        * @noreturn
        **/
        void regWheelClk(Callback:string)
        functag void onWheel(Wheel:string)
    
    Example:
        #include "../hotKey"
        
        if(first())
        {
            regHotKey("lcontrol+lalt+backquote", "hotKey1")
            
            function void hotKey1()
            {
                print("Hotkey lcontrol+lalt+backquote")
            }
            
            regKeyClk("onKey")
            
            function void onKey(Key:string, State:number)
            {
                print(format("%s %s", Key, State ? "Pressed" : "Released"))
            }
            
            regWheelClk("onWheel")
            
            function void onWheel(Wheel:string) {
                print(Wheel)
            }
        }
]#

@persist [PRESSED_KEYS ON_KEY_CALLBACK ON_WHEEL_CALLBACK]:string [REGISTERED_HOT_KEYS FILTER_HOT_KEYS CURRENT_KEYS MOUSE_WHEEL]:table [PLAYER_HOOKED]:entity

if(first())
{
    #[
    FILTER_HOT_KEYS["lcontrol", number] = 1
    FILTER_HOT_KEYS["rcontrol", number] = 1
    FILTER_HOT_KEYS["lshift",   number] = 1
    FILTER_HOT_KEYS["rshift",   number] = 1
    FILTER_HOT_KEYS["lalt",     number] = 1
    FILTER_HOT_KEYS["ralt",     number] = 1
    ]#
    
    PLAYER_HOOKED = owner()
    
    MOUSE_WHEEL["wheel_down", string] = "mouse_wheel_up"
    MOUSE_WHEEL["invprev",    string] = "mouse_wheel_up"
    MOUSE_WHEEL["wheel_up",   string] = "mouse_wheel_down"
    MOUSE_WHEEL["invnext",    string] = "mouse_wheel_down"
    
    function void regHotKey([Hotkey Callback]:string) {
        local Ar = Hotkey:lower():explode("+")
        if(Ar:count() > 1 & Callback) {
            REGISTERED_HOT_KEYS[Ar:concat(" ")+" ", string] = Callback
        }
    }
    
    function void regKeyClk(Callback:string) {
        ON_KEY_CALLBACK = Callback
    }
    
    function void hookPlayerKeys(Player:entity) {
        runOnKeys(PLAYER_HOOKED, 0)
        PLAYER_HOOKED = Player
        runOnKeys(PLAYER_HOOKED, 1)
    }
    
    function void regWheelClk(Callback:string) {
        ON_WHEEL_CALLBACK = Callback
        runOnMouseKey(1)
    }
    
    runOnKeys(PLAYER_HOOKED, 1)
}

if(keyClk(PLAYER_HOOKED))
{
    local Key = keyClkPressed()
    if(!Key:find("toggle"))
    {
        if(!PLAYER_HOOKED:keyPressed(Key)) {
            if(CURRENT_KEYS[Key, number])
            {
                CURRENT_KEYS[Key, number] = 0
                local Pos = PRESSED_KEYS:find(Key+" ")
                if(Pos) {
                    local Str = ""
                    if(Pos > 1) {
                        Str += PRESSED_KEYS:sub(1, Pos-1)
                    }
                    Str += PRESSED_KEYS:sub(Pos+Key:length()+1)
                    PRESSED_KEYS = Str
                }
                #Released
                if(ON_KEY_CALLBACK) {
                    ON_KEY_CALLBACK(Key, 0)
                }
            }
        } else {
            if(!CURRENT_KEYS[Key, number]) {
                CURRENT_KEYS[Key, number] = 1
                PRESSED_KEYS += Key+" "
            }
            else
            {
                #Released
                if(ON_KEY_CALLBACK) {
                    ON_KEY_CALLBACK(Key, 0)
                }
            }
            #Pressed
            local Callback = REGISTERED_HOT_KEYS[PRESSED_KEYS, string]
            if(Callback) {
                Callback()
            }
            if(ON_KEY_CALLBACK) {
                ON_KEY_CALLBACK(Key, 1)
            }
        }
    }
}

if(ON_WHEEL_CALLBACK & (!clk() & !tickClk() & !keyClk())) {
    local Mouse = clLastMouseKeyPress()
    if(Mouse != "null") {
        if(!"left_right":find(Mouse, 1)) {
            ON_WHEEL_CALLBACK(MOUSE_WHEEL[Mouse, string])
        }
        clKeyClearBuffer()
    }
}
